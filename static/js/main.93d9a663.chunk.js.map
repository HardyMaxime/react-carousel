{"version":3,"sources":["components/Carousel/Carousel.js","components/CarouselSlide/CarouselSlide.js","App.js","serviceWorker.js","index.js"],"names":["Carousel","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","slidesCount","state","slides","length","next","e","preventDefault","index","setState","direction","prev","goto","createPagination","pagination","_loop","i","push","react_default","a","createElement","className","key","onClick","props","children","_this2","React","Children","map","child","cloneElement","visible","Component","carouselSlide","react_transition_group","transitionName","concat","PureComponent","App","components_Carousel_Carousel","CarouselSlide_CarouselSlide","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93d9a663.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './Carousel.css'\r\n\r\nclass Carousel extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            index: 0,\r\n            slides : [],\r\n            direction : 'right'\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            slides : this.props.children\r\n        })\r\n    }\r\n\r\n    slidesCount = () => {\r\n        return this.state.slides.length\r\n    }\r\n\r\n    next = e => {\r\n        e.preventDefault()\r\n        if(this.state.index >= this.slidesCount() - 1) {\r\n           return this.setState({\r\n                index: 0,\r\n                direction: 'right'\r\n            })\r\n        }\r\n        this.setState({\r\n            index:  this.state.index + 1,\r\n            direction : 'right'\r\n        })  \r\n    }\r\n\r\n    prev = e => {\r\n        e.preventDefault()\r\n        if(this.state.index <= 0) {\r\n            return this.setState({\r\n                index: this.slidesCount() - 1,\r\n                direction: 'left'\r\n            })\r\n        } \r\n        this.setState({\r\n            index:  this.state.index - 1,\r\n            direction: 'left'\r\n        }) \r\n    }\r\n\r\n    goto = index => {\r\n        const direction = index > this.state.index ? 'right' : 'left'\r\n        this.setState({\r\n            index,\r\n            direction\r\n        })\r\n    }\r\n\r\n    createPagination =() => {\r\n        let pagination = []\r\n        for(let i = 0; i < this.slidesCount(); i++) {\r\n            pagination.push(<button className={this.state.index === i ? 'active' : ''} key={i} onClick={() => this.goto(i)} ></button>)\r\n        }\r\n        return pagination\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.map(this.props.children, (child, index) => {\r\n            return React.cloneElement(child, {\r\n                index,\r\n                visible: index === this.state.index,\r\n                direction : this.state.direction\r\n            });\r\n        });\r\n        return (\r\n            <div className=\"carousel\">\r\n                { children }\r\n                <button className=\"carousel__nav carousel__next\" onClick={this.next}></button>\r\n                <button className=\"carousel__nav carousel__prev\" onClick={this.prev}></button>\r\n                <div className=\"carousel__pagination\">{this.createPagination()}</div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nCarousel.propTypes = {\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ]),\r\n}\r\n\r\n\r\nexport default Carousel","import React from 'react';\r\nimport { CSSTransitionGroup } from 'react-transition-group'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './CarouselSlide.css'\r\n \r\nclass carouselSlide extends React.PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            index : 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            index: this.props.index\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const direction = this.props.direction\r\n        return(\r\n            <CSSTransitionGroup \r\n                transitionName={`slide-${direction}`}\r\n            >\r\n                { this.props.visible ? this.props.children : null }\r\n            </CSSTransitionGroup>\r\n        )\r\n    }\r\n} \r\n \r\n\r\ncarouselSlide.propTypes = {\r\n    direction: PropTypes.string,\r\n    index: PropTypes.number,\r\n    visible: PropTypes.bool,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ]),\r\n}\r\n\r\n\r\nexport default carouselSlide;","import React, { Component } from 'react';\nimport Carousel from './components/Carousel/Carousel'\nimport CarouselSlide from './components/CarouselSlide/CarouselSlide'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Carousel>\n          <CarouselSlide>\n            <img src=\"https://picsum.photos/630/300?image=0\" alt=\"\"/>\n          </CarouselSlide>\n          <CarouselSlide>\n            <img src=\"https://picsum.photos/630/300?image=1\" alt=\"\"/>\n          </CarouselSlide>\n          <CarouselSlide>\n            <img src=\"https://picsum.photos/630/300?image=3\" alt=\"\"/>\n          </CarouselSlide>\n          <CarouselSlide>\n            <img src=\"https://picsum.photos/630/300?image=4\" alt=\"\"/>\n          </CarouselSlide>\n        </Carousel>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}